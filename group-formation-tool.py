# -*- coding: utf-8 -*-
"""Project Management Tool: Group Formation

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sSVUPp33bhd6lg_tgrCqjiXzX24uJhzf

# Project Management Tool for Task Delegation
In this tutorial, we use EvaDB + ChatGPT to categorize tasks and effectively assign them to members of a team project based on their strengths and weaknesses.

<table align="left">
  <td>
    <a target="_blank" href="https://colab.research.google.com/github/georgia-tech-db/eva/blob/staging/tutorials/14-food-review-tone-analysis-and-response.ipynb"><img src="https://www.tensorflow.org/images/colab_logo_32px.png" /> Run on Google Colab</a>
  </td>
  <td>
    <a target="_blank" href="https://github.com/georgia-tech-db/eva/blob/staging/tutorials/14-food-review-tone-analysis-and-response.ipynb"><img src="https://www.tensorflow.org/images/GitHub-Mark-32px.png" /> View source on GitHub</a>
  </td>
  <td>
    <a target="_blank" href="https://github.com/georgia-tech-db/eva/raw/staging/tutorials/14-food-review-tone-analysis-and-response.ipynb"><img src="https://www.tensorflow.org/images/download_logo_32px.png" /> Download notebook</a>
  </td>
</table><br><br>

## Start Postgres
"""

!apt install postgresql
!service postgresql start

"""## Create User and Database"""

!sudo -u postgres psql -c "CREATE USER eva WITH SUPERUSER PASSWORD 'myPassword'"
!sudo -u postgres psql -c "CREATE DATABASE evadb"

import csv
import psycopg2

"""## Install EvaDB"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install --quiet "evadb[document]"
# %pip install psycopg2

import evadb
cursor = evadb.connect().cursor()

import warnings
warnings.filterwarnings("ignore")

from IPython.core.display import display, HTML
def pretty_print(df):
    return display(HTML( df.to_html().replace("\\n","<br>")))

# Download ChatGPT UDF if needed
!wget -nc https://raw.githubusercontent.com/georgia-tech-db/eva/master/evadb/functions/chatgpt.py -O chatgpt.py

"""## Create Data Source in EvaDB
We use data source to connect EvaDB directly to underlying database systems like Postgres.
"""

params = {
    "user": "eva",
    "password": "myPassword",
    "host": "localhost",
    "port": "5432",
    "database": "evadb",
}
query = f"CREATE DATABASE project_management WITH ENGINE = 'postgres', PARAMETERS = {params};"
cursor.query(query).df()

"""## Creating a Cursor for the PostgreSQL Database"""

conn = psycopg2.connect(database="evadb",
                        user='eva', password='myPassword',
                        host='localhost', port='5432'
)

conn.autocommit = True
cursor2 = conn.cursor()

"""## Create a Skills Table"""

cursor.query("""
USE project_management {
  DROP TABLE IF EXISTS skills
}
""").df()

cursor.query("""
USE project_management {
  CREATE TABLE skills (skill_id INT NOT NULL, skill VARCHAR(500) NOT NULL)
}
""").df()

"""## Insert Sample Skill Set from CSV File"""

command = '''COPY skills(skill_id, skill)
FROM '/content/skills.csv'
DELIMITER ','
CSV HEADER;'''

cursor2.execute(command)

"""## Review Skills Table"""

cursor.query("SELECT * FROM project_management.skills;").df()

"""## Create a Projects Table"""

cursor.query("""
USE project_management {
  DROP TABLE IF EXISTS projects
}
""").df()

cursor.query("""
USE project_management {
  CREATE TABLE projects (project_id INT NOT NULL, project VARCHAR(1000) NOT NULL)
}
""").df()

"""## Insert Sample Projects from CSV File"""

command = '''COPY projects(project_id, project)
FROM '/content/projects.csv'
DELIMITER ','
CSV HEADER;'''

cursor2.execute(command)

"""## Setting the OpenAI Key"""

import os
os.environ["OPENAI_KEY"] = "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"

"""## Add the Needed Project Skills to the Table Using ChatGPT"""

project_reqs = cursor.query("""SELECT p.project_id, p.project, c.response FROM project_management.projects AS p JOIN (SELECT project, ChatGPT("Here is a basic skill set: organization, leadership, technical fluency, creativity, verbal communication, financial literacy, athleticism, and writing. Pick 3 to represent the most important skills needed for this project. Format the answer ONLY as 'skill 1, skill 2, and skill 3", project) FROM project_management.projects) AS c ON p.project = c.project;""").df()
pretty_print(project_reqs);

"""## Review Project Table
Now we have 3 projects stored in the table.
"""

cursor.query("SELECT * FROM project_management.projects;").df()

print(project_reqs.columns)

"""## Create a Candidates Table"""

cursor.query("""
USE project_management {
  DROP TABLE IF EXISTS candidates
}
""").df()

cursor.query("""
USE project_management {
  CREATE TABLE candidates(candidate_id INT NOT NULL, fname VARCHAR(100) NOT NULL, lname VARCHAR(100) NOT NULL)
}
""").df()

"""## Load Sample Candidates from CSV File


"""

command = '''COPY candidates(candidate_id, fname, lname)
FROM '/content/candidates.csv'
DELIMITER ','
CSV HEADER;'''

cursor2.execute(command)

"""## Review Candidates Table"""

cursor.query("SELECT * FROM project_management.candidates;").df()

"""## Create a Strengths Table"""

cursor.query("""
USE project_management {
  DROP TABLE IF EXISTS strengths
}
""").df()

cursor.query("""
USE project_management {
  CREATE TABLE strengths(candidate_id INT NOT NULL, skill_id INT NOT NULL)
}
""").df()

"""## Insert Sample Strengths from CSV File


"""

command = '''COPY strengths(candidate_id, skill_id)
FROM '/content/strengths.csv'
DELIMITER ','
CSV HEADER;'''

cursor2.execute(command)

"""## Review Strengths Table

"""

cursor.query("SELECT * FROM project_management.strengths;").df()

"""## Create a Weaknesses Table"""

cursor.query("""
USE project_management {
  DROP TABLE IF EXISTS weaknesses
}
""").df()

cursor.query("""
USE project_management {
  CREATE TABLE weaknesses (candidate_id INT NOT NULL, skill_id INT NOT NULL)
}
""").df()

"""## Insert Sample Weaknesses from CSV File"""

command = '''COPY weaknesses(candidate_id, skill_id)
FROM '/content/weaknesses.csv'
DELIMITER ','
CSV HEADER;'''

cursor2.execute(command)

"""## Review Weaknesses Table"""

cursor.query("SELECT * FROM project_management.weaknesses;").df()

"""## Create a View of the Strengths of Each Candidate"""

cursor2.execute("CREATE OR REPLACE VIEW strength_details AS SELECT DISTINCT c.candidate_id as cid, c.fname AS first_name, c.lname AS last_name, sk.skill AS strength FROM candidates AS c JOIN strengths AS s ON c.candidate_id = s.candidate_id JOIN skills AS sk ON s.skill_id = sk.skill_id;")

cursor2.execute("CREATE OR REPLACE VIEW candidate_strengths as SELECT DISTINCT cid, first_name, last_name, STRING_AGG(strength, ', ') AS strengths FROM strength_details GROUP BY cid, first_name, last_name;")

cursor.query("SELECT * FROM project_management.candidate_strengths;").df()

"""## Create a View of the Weaknesses of Each Candidate"""

cursor2.execute("CREATE OR REPLACE VIEW weakness_details AS SELECT DISTINCT c.candidate_id as cid, c.fname AS first_name, c.lname AS last_name, sk.skill AS weakness FROM candidates AS c JOIN weaknesses AS w ON c.candidate_id = w.candidate_id JOIN skills AS sk ON w.skill_id = sk.skill_id;")

cursor2.execute("CREATE OR REPLACE VIEW candidate_weaknesses as SELECT DISTINCT cid, first_name, last_name, STRING_AGG(weakness, ', ') AS weaknesses FROM weakness_details GROUP BY cid, first_name, last_name;")

cursor.query("SELECT * FROM project_management.candidate_weaknesses;").df()

"""## Create a View of the Weaknesses and Strengths of Each Candidate"""

cursor2.execute("CREATE OR REPLACE VIEW strengths_and_weaknesses AS SELECT s.first_name, s.last_name, s.strengths, w.weaknesses FROM candidate_strengths AS s join candidate_weaknesses AS w on s.first_name = w.first_name and s.last_name = w.last_name;")
cursor.query("SELECT * FROM project_management.strengths_and_weaknesses;").df()

"""## Concatenate Skills and Weaknesses"""

cursor2.execute("create or replace view all_skills as SELECT first_name || ' ' || last_name AS candidate, 'strengths are ' || strengths || ' and weaknesses are ' || weaknesses AS skills FROM strengths_and_weaknesses;")

cursor.query("Select * from project_management.all_skills").df()

"""## Evaluate Candadidates for a Project"""

for i in range(1):
    prompt = f"""
SELECT candidate, ChatGPT(
  "I've been tasked with this project: {project_reqs['p.project'][i]}. It primarily requires these skills {project_reqs['c.response'][i]}. Review the following strengths and weaknesses of my potential teammate and evaluate how good of a candidate they'd be for this project. ONLY respond with a brief explanation and a single, overall rating of 'GREAT', 'OK', or 'BAD' for this candidate.", skills
) FROM project_management.all_skills;
"""
cursor.query(prompt).df()